// Generated by CoffeeScript 1.7.1
(function() {
  var Code, exp, markContainsMF, markMF, monkeyFunctions, monkyfy, _i, _len, _ref;

  Code = require('./nodes').Code;

  monkeyFunctions = ['turn', 'step'];

  monkyfy = function(expressions) {
    var c, exp, newExpressions, postFunction, _i, _len;
    newExpressions = [];
    c = 0;
    for (_i = 0, _len = expressions.length; _i < _len; _i++) {
      exp = expressions[_i];
      newExpressions.push(exp);
      if (exp.toString().substr(1, 4) === "Call" && monkeyFunctions.indexOf(exp.variable.base.value) > -1) {
        postFunction = new Code;
        postFunction.body.expressions = monkyfy(expressions.slice(c + 1));
        exp.args.push(postFunction);
        break;
      } else if (exp.body) {
        exp.body.expressions = monkyfy(exp.body.expressions);
      }
      c = c + 1;
    }
    return newExpressions;
  };

  markMF = function(expressions) {
    var exp, _i, _len, _results;
    _results = [];
    for (_i = 0, _len = expressions.length; _i < _len; _i++) {
      exp = expressions[_i];
      exp.isMF = exp.toString().substr(1, 4) === "Call" && monkeyFunctions.indexOf(exp.variable.base.value) > -1;
      if (exp.body) {
        _results.push(markMF(exp.body.expressions));
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  markMF(fragments.expressions);

  markContainsMF = function(exp) {
    var con, iterEx, _i, _len, _ref;
    if (exp.isMF) {
      exp.containsMF = false;
      return true;
    }
    if (!exp.body) {
      exp.containsMF = false;
      return false;
    } else {
      con = false;
      _ref = exp.body.expressions;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        iterEx = _ref[_i];
        if (markContainsMF(iterEx)) {
          con = true;
        }
      }
      exp.containsMF = con;
      return con;
    }
  };

  _ref = fragments.expressions;
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    exp = _ref[_i];
    markContainsMF(expressions);
  }

}).call(this);
