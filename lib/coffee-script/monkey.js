// Generated by CoffeeScript 1.7.1
(function() {
  var Code, Value, exp, markContainsMF, markMF, monkeyFunctions, monkify, monkyfyForBlock, _i, _len, _ref, _ref1;

  _ref = require('./nodes'), Code = _ref.Code, Value = _ref.Value;

  monkeyFunctions = ['turn', 'step'];

  monkify = function(expressions) {
    var c, exp, newExpressions, postFunction, _i, _len;
    newExpressions = [];
    c = 0;
    for (_i = 0, _len = expressions.length; _i < _len; _i++) {
      exp = expressions[_i];
      newExpressions.push(exp);
      if (exp.toString().substr(1, 4) === "Call" && monkeyFunctions.indexOf(exp.variable.base.value) > -1) {
        postFunction = new Code;
        postFunction.body.expressions = monkify(expressions.slice(c + 1));
        exp.args.push(postFunction);
        break;
      } else {
        if (exp.body) {
          exp.body.expressions = monkify(exp.body.expressions);
        }
        if (exp.elseBody) {
          exp.elseBody.expressions = monkify(exp.elseBody.expressions);
        }
      }
      c = c + 1;
    }
    return newExpressions;
  };

  markMF = function(expressions) {
    var exp, _i, _len, _results;
    _results = [];
    for (_i = 0, _len = expressions.length; _i < _len; _i++) {
      exp = expressions[_i];
      exp.isMF = exp.toString().substr(1, 4) === "Call" && monkeyFunctions.indexOf(exp.variable.base.value) > -1;
      if (exp.body) {
        _results.push(markMF(exp.body.expressions));
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  markContainsMF = function(exp) {
    var con, iterEx, _i, _len, _ref1;
    if (exp.isMF) {
      exp.containsMF = false;
      return true;
    }
    if (!exp.body) {
      exp.containsMF = false;
      return false;
    } else {
      con = false;
      _ref1 = exp.body.expressions;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        iterEx = _ref1[_i];
        if (markContainsMF(iterEx)) {
          con = true;
        }
      }
      exp.containsMF = con;
      return con;
    }
  };

  monkyfyForBlock = function(fore) {
    var eef;
    eef = new If();
    eef.condition.first = new Value;
    eef.condition.first.base = fore.name;
    eef.condition.operator = "<=";
    eef.condition.second = fore.source.base.to;
    eef.body = fore.body;
    return eef;
  };

  _ref1 = fragments.expressions;
  for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
    exp = _ref1[_i];
    console.log(1);
  }

}).call(this);
